<div  class="board-detail <%= action_name == "show" ? "sub-detail" : ""%>">
  <div id="<%= dom_id board %>">
    <p>
      <strong>Board Name:</strong>
      <%= link_to board.name, board %>
    </p>

    <p>
      <strong>Creator:</strong>
      <%= board.creator.email %>
    </p>

    <p>
      <strong>Dimension:</strong>
      <%= "#{board.height}x#{board.width}" %>
    </p>

    <p>
      <strong>Number of Mines:</strong>
      <%= board.number_of_mines %>
    </p>

    <p>
      <strong>Created At:</strong>
      <%= board.formatted_created_date%>
    </p>


  </div>
  <br/>
  <% if action_name == "show" %>
    <div id="board-container" style="width: 1000px; height: 500px; overflow: auto;">
      <canvas id="minesweeperBoard"></canvas>
    </div>


    <script>
      const cols = <%= @cols %>;
      const rows = <%= @rows %>;
      const number_of_mines = <%= @number_of_mines %>;
      const mineDataUrl = '<%= mines_board_path(@board) %>';
      let page = 0;
      const perPage = 10000;

      document.addEventListener('DOMContentLoaded', function() {
        const container = document.getElementById('board-container');
        const canvas = document.getElementById('minesweeperBoard');
        const ctx = canvas.getContext('2d');
        let cellSize = 15;
        
        if (rows * cols > 1000 && number_of_mines > 200) {
          cellSize = 15;
        } else if (rows * cols > 400 && number_of_mines > 100) {
          cellSize = 20;
        }
        canvas.width = cols * cellSize
        canvas.height = rows * cellSize

        let mineData = [];
        let max_page = 0;

        function loadMineData(){
          fetch(`${mineDataUrl}?page=${page}&per_page=${perPage}`) 
                    .then(response => response.json()) 
                    .then(data => {
                      mineData = [...mineData, ...data.mines];
                      console.log(data.mines)
                      max_page = data.max_page;
                      page++;
                      renderBoard();
                    }); 
        
        }

        function renderBoard() {
          for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
              const x = col * cellSize;
              const y = row * cellSize;

              ctx.strokeStyle = 'black';
              ctx.lineWidth = 1;
              ctx.strokeRect(x, y, cellSize, cellSize);
              ctx.fillStyle = 'white';
              ctx.fillRect(x, y, cellSize, cellSize);

              const mineCell = mineData.find(cell => cell.row === row && cell.col === col);
              if (mineCell) {
                ctx.fillRect(x, y, cellSize, cellSize);
                ctx.fillStyle = 'black';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.font = `${cellSize * 0.75}px Arial`; // Adjust font size
                ctx.fillText('ðŸ’£', x + cellSize / 2, y + cellSize / 2);
              }
            }
          }
        }

        function debounce(func, wait) {
          let timeout;
          return function(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        const loadMineWithDebounced = debounce(loadMineData, 500);


        container.addEventListener('scroll', () => {
          const scrollTop = container.scrollTop; 
          const scrollHeight = container.scrollHeight; 
          const clientHeight = container.clientHeight; 
          const scrollLeft = container.scrollLeft; 
          const scrollWidth = container.scrollWidth; 
          const clientWidth = container.clientWidth;

          const nearBottom = scrollTop + clientHeight >= (scrollHeight - clientHeight) / 4; 
          const nearRightEdge = scrollLeft + clientWidth >= (scrollWidth - clientWidth) / 4;

          if ((nearBottom || nearRightEdge) && page <= max_page) {
            loadMineWithDebounced()
          }
        });

        renderBoard();
        loadMineData();
        });

    </script>


  <% end %>


</div>
